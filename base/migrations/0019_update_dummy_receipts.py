# Generated by Django 4.2.4 on 2023-09-02 05:26

from django.conf import settings
from django.db import migrations
from django.utils import timezone


def update_dummy_receipt(receipt, ref_object):
    if receipt["orderId"] == "DUMMY":
        if receipt["side"] == "SELL":
            receipt["symbol"] = ref_object.receipt_buying["symbol"]
            if ref_object.timestamp_selling:
                receipt["transactTime"] = round(
                    ref_object.timestamp_selling.timestamp() * 1000
                )
            else:
                receipt["transactTime"] = round(
                    ref_object.timestamp_buying.timestamp() * 1000
                )
        else:
            receipt[
                "symbol"
            ] = f"{receipt['fills'][0]['commissionAsset']}{settings.QUOTE_ASSET}"
            if ref_object.timestamp_buying:
                receipt["transactTime"] = round(
                    ref_object.timestamp_buying.timestamp() * 1000
                )
            else:
                receipt["transactTime"] = round(
                    ref_object.timestamp_start.timestamp() * 1000
                )
    return receipt


def update_all_dummy_receipts(apps, schema_editor):
    TraderoBot = apps.get_model("base", "TraderoBot")
    TradeHistory = apps.get_model("base", "TradeHistory")

    for bot in TraderoBot.objects.all():
        if bot.receipt_buying:
            bot.receipt_buying = update_dummy_receipt(bot.receipt_buying, bot)
        if bot.receipt_selling:
            bot.receipt_selling = update_dummy_receipt(
                bot.receipt_selling, bot
            )
        TraderoBot.objects.filter(pk=bot.pk).update(
            receipt_buying=bot.receipt_buying,
            receipt_selling=bot.receipt_selling,
        )

    for th in TradeHistory.objects.all():
        if th.receipt_buying:
            th.receipt_buying = update_dummy_receipt(th.receipt_buying, th)
            th.timestamp_buying = timezone.datetime.fromtimestamp(
                th.receipt_buying["transactTime"] // 1000
            )
        if th.receipt_selling:
            th.receipt_selling = update_dummy_receipt(th.receipt_selling, th)
            th.timestamp_selling = timezone.datetime.fromtimestamp(
                th.receipt_selling["transactTime"] // 1000
            )
        TradeHistory.objects.filter(pk=th.pk).update(
            receipt_buying=th.receipt_buying,
            receipt_selling=th.receipt_selling,
            timestamp_buying=th.timestamp_buying,
            timestamp_selling=th.timestamp_selling,
        )


class Migration(migrations.Migration):
    dependencies = [
        (
            "base",
            "0018_alter_kline_number_of_trades_alter_kline_price_close_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(
            code=update_all_dummy_receipts,
            reverse_code=migrations.RunPython.noop,
        )
    ]
